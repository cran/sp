
R : Copyright 2005, The R Foundation for Statistical Computing
Version 2.1.0  (2005-04-18), ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> library(sp)
> data(meuse)
> x = meuse
> 
> coordinates(x) <- c("x", "y")
> try(proj4string(x) <- 1.5)
Error in "proj4string<-"(`*tmp*`, value = 1.5) : 
	assigned value must be CRS object
> try(coordinates(a) <- cbind(1:10, 10:1))
Error in try(coordinates(a) <- cbind(1:10, 10:1)) : 
	Object "a" not found
> # fails because a is not found; passes if a assigned NULL, see pass1.R
> 
> x = meuse
> # invalid coordinate formulae:
> try(coordinates(x) <- ~log(x)+sqrt(y)) # no expressions allowed
Error in "[.data.frame"(object, , -coord.numbers, drop = FALSE) : 
	undefined columns selected
> try(coordinates(x) <- ~x+y+z) # z is not present
Error in eval(expr, envir, enclos) : Object "z" not found
> x$x2 = x$x^2
> x$y2 = x$y^2
> try(coordinates(x) <- ~x+y+x2+y2) # 4D now passes check...
> x = meuse
> try(coordinates(x) <- ~x) # 1D not allowed
Error in validObject(.Object) : invalid class "SpatialPoints" object: spatial.dimension should be 2 or more
> 
> # is.na.sp.coords
> a = data.frame(cbind(xx=c(1,NA,2,10),yy=c(2,NA,NA,20)))
> try(coordinates(a) <- c("xx", "yy")) # should fail!
Error in "coordinates<-"(`*tmp*`, value = c("xx", "yy")) : 
	coordinates are not allowed to contain missing values
> 
> x = meuse[1:4,]
> coordinates(x) = c(1,2)
> # this should fail -- zinc is not a row:
> #(and will break automatic testing, so outcommented!)
> #try(q <- x["zinc",])
> # this will issue warning under S-Plus, or a silent rename under R
> try(x[c("zinc", "copper", "zinc")])
       coordinates zinc copper zinc.1
1 (181072, 333611) 1022     85   1022
2 (181025, 333558) 1141     81   1141
3 (181165, 333537)  640     68    640
4 (181298, 333484)  257     81    257
> 
> # this will fail, as "x" is not in the data part:
> try(x[c("zinc", "x", "copper", "zinc")])
Error in x@data[i, j, drop = FALSE] : undefined columns selected
> 
> xx = data.frame(x=1:10, y=1:10)
> 
> # fails; use SpatialPoints() to create points without attribute 
> try(coordinates(xx) <- c("x", "y")) 
Error in "coordinates<-"(`*tmp*`, value = c("x", "y")) : 
	only coords columns present: use SpatialPoints to create a points object
> 
> x = matrix(3, 5, 2)
> dimnames(x) = list(c(1,1:4), NULL)
> y = data.frame(a = 1:5, b = 5:1)
> try(SpatialPointsDataFrame(x, y)) # will complain:
Error in SpatialPointsDataFrame(x, y) : nr of unique coords ID's (rownames) not equal to nr of data records
> SpatialPointsDataFrame(x, y, match.ID = FALSE) # won't complain
  coordinates a b
1      (3, 3) 1 5
2      (3, 3) 2 4
3      (3, 3) 3 3
4      (3, 3) 4 2
5      (3, 3) 5 1
> 
> Sr1 = Sring(cbind(c(2,4,4,1,2),c(2,3,5,4,2)))
> Sr2 = Sring(cbind(c(5,4,2,5),c(2,3,2,2)))
> Sr3 = Sring(cbind(c(4,4,5,10,4),c(5,3,2,5,5)))
> Sr4 = Sring(cbind(c(5,6,6,5,5),c(4,4,3,3,4)), hole = TRUE)
> 
> Srs1 = Srings(list(Sr1), "s1")
> Srs2 = Srings(list(Sr2), "s2")
> Srs3 = Srings(list(Sr3, Sr4), "s2")
> try(SR <- SpatialRings(list(Srs1,Srs2,Srs3))) # will complain
Error in validObject(.Object) : invalid class "SpatialRings" object: non-unique Srings ID slot values
> Srs3 = Srings(list(Sr3, Sr4), "s3/4")
> SR = SpatialRings(list(Srs1,Srs2,Srs3)) # won't complain
> 
> attr = data.frame(a=1:3, b=3:1, row.names=c("s1", "s2", "s3"))
> try(SrDf <- SpatialRingsDataFrame(SR, attr)) # will complain
Error in SpatialRingsDataFrame(SR, attr) : 
	row.names of data and Srings IDs do not match
> SrDf = SpatialRingsDataFrame(SR, attr, match.ID = FALSE) # won't complain
> attr = data.frame(a=1:3, b=3:1, row.names=c("s1", "s2", "s3/4"))
> SrDf = SpatialRingsDataFrame(SR, attr) # won't complain
> 
> 
